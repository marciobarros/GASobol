package sobol.base.random.sobol;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Sobol
{
	/**
	 * Power constant used to calculate the SOBOL sequence
	 */
	private static double power = Math.pow(2.0, 32);
	
	/**
	 * Name of the file containing SOBOL sequence generation data 
	 */
	private static String SOBOL_FILENAME = "data\\sobol\\new-joe-kuo-6.21201";
	
	/**
	 * Memory representation for SOBOL sequence generation data
	 */
	private static List<SobolGenerationData> generationData = null;
	
	/**
	 * Number of dimensions to be generated by the current instance
	 */
	private int dimensions;

	/**
	 * State required to generate the next sequence of quasi-random numbers
	 */
	private long[] x;
	
	/**
	 * Number of quasi-random numbers that were already generated
	 */
	private int count;

	/**
	 * V Parameter used to generate the SOBOL sequence
	 */
	private long v[][];

	/**
	 * Creates an instance of the random number generator, given the dimension to generate
	 * 
	 * @param dimensions		Number of dimensions to generate
	 */
	public Sobol(int dimensions)
	{
		if (generationData == null)
			generationData = loadGenerationData();
		
		this.dimensions = dimensions;
		this.x = new long[dimensions];
		
		for (int i = 0; i < dimensions; i++)
			x[i] = 0;
		
		v = new long[dimensions][];
		v[0] = new long[32+1];
		
		for (int i = 1; i <= 32; i++)
			v[0][i] = (1L << (32 - i));
		
		for (int i = 1; i < dimensions; i++)
		{
			SobolGenerationData entry = generationData.get(i-1);
			v[i] = calculateV(entry);
		}

		this.count = 0;
	}
	
	/**
	 * Load the SOBOL sequence generation data from its file
	 */
	private static List<SobolGenerationData> loadGenerationData()
	{
		Scanner scanner;
		
		try
		{
			scanner = new Scanner(new FileInputStream(SOBOL_FILENAME));
		}
		catch (FileNotFoundException e)
		{
			return null;
		}
		
		scanner.nextLine();
		List<SobolGenerationData> data = new ArrayList<SobolGenerationData>();
		
		while (scanner.hasNext())
		{
			SobolGenerationData entry = new SobolGenerationData();

			scanner.nextInt();
			entry.s = scanner.nextInt();
			entry.a = scanner.nextInt();
			entry.m = new long[entry.s + 1];

			for (int i = 1; i <= entry.s; i++)
				entry.m[i] = scanner.nextLong();

			data.add(entry);
		}
		
		scanner.close();
		return data;
	}
	
	/**
	 * Calculate the V parameter for a given index
	 * 
	 * @param entry		Sobol sequence generator index
	 */
	private long[] calculateV(SobolGenerationData entry)
	{
		int s = entry.s;
		long[] v = new long[32 + 1];
		
		if (32 <= s)
		{
			for (int i = 1; i <= 32; i++)
				v[i] = entry.m[i] << (32 - i);
		}
		else
		{
			for (int i = 1; i <= s; i++)
				v[i] = entry.m[i] << (32 - i);

			for (int i = s + 1; i <= 32; i++)
			{
				v[i] = v[i - s] ^ (v[i - s] >> s);

				for (int k = 1; k <= s - 1; k++)
					v[i] ^= (((entry.a >> (s - 1 - k)) & 1) * v[i - k]);
			}
		}
		
		return v; 
	}

	/**
	 * Creates the starting SOBOL sequence
	 */
	private double[] generateStartingSequence()
	{
		double[] results = new double[dimensions];
		
		for (int i = 0; i < dimensions; i++)
			results[i] = 0.0;
		
		count = 1;
		return results;
	}

	/**
	 * Calculates the C parameter for a given index
	 * 
	 * @param index		Number of the desired index
	 */
	private int calculateC(int index)
	{
		int c = 1;
		int value = index;
		
		while ((value & 1) != 0)
		{
			value >>= 1;
			c++;	
		}
		
		return c;
	}

	/**
	 * Creates the next sequence
	 */
	public double[] next()
	{
		if (count == 2000000000)
			count = 0;
		
		if (count == 0)
			return generateStartingSequence();
		
		double[] results = new double[dimensions];
		
		int c = calculateC(count-1);
		x[0] ^= v[0][c];
		results[0] = x[0] / power;
		
		for (int i = 1; i < dimensions; i++)
		{
			x[i] ^= v[i][c];
			results[i] = x[i] / power;
		}
		
		count++;
		return results;
	}
}

class SobolGenerationData
{
	public int a;
	
	public int s;
	
	public long[] m;
}